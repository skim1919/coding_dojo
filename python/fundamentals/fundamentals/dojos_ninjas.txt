# Forward engineer the dojos_and_ninjas_schema from the previous chapter Done
# Create a .txt file where you'll save each of your queries from below Done
# Test
SELECT * FROM dojos;
SELECT * FROM ninjas;

# Query: Create 3 new dojos
INSERT INTO dojos (name)
VALUE ("Sarang Kim"), ("Jin Kim"), ("HY Kim");

# Query: Delete the 3 dojos you just created
DELETE FROM dojos
WHERE id BETWEEN 1 and 3;

# Query: Create 3 more dojos
INSERT INTO dojos (name)
VALUE ("Any Kim"), ("Sue Lee"), ("Min Park");

# Query: Create 3 ninjas that belong to the first dojo
INSERT INTO ninjas (first_name, last_name, age, dojo_id )
VALUE ("Min", "Cho", 10, 4), ("Min2", "Cho", 20, 4), ("Min3", "Cho", 40, 4);

# Query: Create 3 ninjas that belong to the second dojo
INSERT INTO ninjas (first_name, last_name, age, dojo_id )
VALUE ("Jae", "Kang", 5, 5), ("Jae2", "Kang", 1, 5), ("Jae3", "Kang", 39, 5);

# Query: Create 3 ninjas that belong to the third dojo
INSERT INTO ninjas (first_name, last_name, age, dojo_id )
VALUE ("Kay", "Moon", 2, 6), ("kay2", "Moon2", 4, 6), ("kay3", "Moon3", 5, 6);

# Query: Retrieve all the ninjas from the first dojo
SELECT * FROM dojos
LEFT JOIN ninjas ON dojos.id = ninjas.dojo_id
WHERE dojos.id = 4;

# Query: Retrieve all the ninjas from the last dojo
SELECT * FROM dojos
LEFT JOIN ninjas ON dojos.id = ninjas.dojo_id
WHERE dojos.id = (SELECT dojo_id FROM ninjas ORDER BY id DESC LIMIT 1);

# Query: Retrieve the last ninja's dojo
SELECT * FROM dojos
WHERE dojos.id = (SELECT dojo_id FROM ninjas ORDER BY dojo_id DESC LIMIT 1);


# Query: Use a JOIN to retrieve the ninja with id 6 as well as the data from its dojo. Be sure to do this in one query using a join statement.
SELECT * FROM ninjas
JOIN dojos ON ninjas.dojo_id = dojos.id
WHERE ninjas.id = 6;

# Query: Use a JOIN to retrieve all the ninjas as well as that ninja's dojo, note, you will see repeated data on dojos as a dojo can have many ninjas!
SELECT * FROM ninjas
JOIN dojos ON ninjas.dojo_id = dojos.id;





